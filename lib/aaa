import 'package:example/random_words.dart';
import 'package:flutter/material.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:http/http.dart';

final nameController = TextEditingController();
final emailController = TextEditingController();
final messageController = TextEditingController();

class Sendmail extends StatelessWidget {
  const Sendmail({Key? key}) : super(key: key);


  @override
  Widget build(BuildContext context) {
    return Scaffold(

        appBar: AppBar(
        title: const Text('Email',
        style: TextStyle(
        fontSize: 20,
        fontWeight: FontWeight.bold,
        color: Colors.white,
    ))),
    body: Container(
      padding: EdgeInsets.fromLTRB(30, 0, 30, 0),
      constraints: BoxConstraints.expand(),
      color: Colors.white,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: <Widget>[
          Padding(
              padding: const EdgeInsets.fromLTRB(0, 0, 0, 40),
              child: Container(
                width: 70,
                height: 70,
                padding: EdgeInsets.all(20),

                decoration: const BoxDecoration(
                  shape: BoxShape.circle,
                  color: Colors.black,
                ),
                child: FlutterLogo(),
              )),
          Padding(
            padding: const EdgeInsets.fromLTRB(0, 0, 0, 40),
            child: Text("Send mail",
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                )),
          ),
          Padding(
            padding: const EdgeInsets.fromLTRB(0, 0, 0, 40),
            child: TextFormField(
                style: TextStyle(
                  fontSize: 18,
                  color: Colors.black,
                ),
                controller: nameController,
                decoration: InputDecoration(
                  hintText: 'Name',
                  labelText: "Your name",
                  labelStyle: TextStyle(
                    color: Colors.grey,
                    fontSize: 15,
                  ),
                )),
          ),
          Padding(
            padding: const EdgeInsets.fromLTRB(0, 0, 0, 40),
            child: Stack(
              alignment: AlignmentDirectional.centerEnd,
              children: <Widget>[
                TextFormField(
                    style: TextStyle(
                      fontSize: 18,
                      color: Colors.black,
                    ),
                    controller: emailController,
                    decoration: InputDecoration(
                      hintText: 'Email',
                      labelText: "Email address",
                      labelStyle: TextStyle(
                        color: Colors.grey,
                        fontSize: 15,
                      ),
                    )),
              ],
            ),
          ),
          Padding(
            padding: const EdgeInsets.fromLTRB(0, 0, 0, 40),
            child: Stack(
              alignment: AlignmentDirectional.centerEnd,
              children: <Widget>[
                TextFormField(
                    style: TextStyle(
                      fontSize: 18,
                      color: Colors.black,
                    ),
                    controller: messageController,
                    decoration: InputDecoration(
                      hintText: 'Message',
                      labelText: "Message",
                      labelStyle: TextStyle(
                        color: Colors.grey,
                        fontSize: 15,
                      ),
                    )),
              ],
            ),
          ),
          Padding(
            padding: const EdgeInsets.fromLTRB(0, 0, 0, 40),
            child: SizedBox(
              width: double.infinity,
              height: 56,
              child: ElevatedButton(
                onPressed: (){
                  sendEmail1();
                },
                child: Text(
                  "Send Email",
                  style: TextStyle(color: Colors.white, fontSize: 16),
                ),
                style: ElevatedButton.styleFrom(
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.all(Radius.circular(8))),
                  primary: Colors.blue,
                ),
              ),
            ),
          ),
        ],
      ),
    ),
    );
  }

  Future login() async {
    try{
      // String url = Platform.isAndroid ? 'http://192.168.1.10:80' : 'http://l.space';
      final http.Response response = await http.post(Uri.parse('https://test-space.hirogo.net/api/auth/login'),
          body:{
            "email": "ngokaka90@gmail.com",
            "password": "ngokaka90@gmail.com",
          },
      );

      if(response.statusCode == 200){
        final Map<String, dynamic>  data1 = jsonDecode(response.body);

        print(data1);
        print(data1.runtimeType);
        print('Login successfully');
      }else {
        print('failed');
      }
    }catch(e){
      print(e.toString());
    }
  }


  Future sendEmail1() async {
    login();
    print(1212311231312231233);

  }
}


class MyHomePage extends StatelessWidget {
  MyHomePage({Key? key}) : super(key: key);
final _formKey = GlobalKey<FormState>();
  final nameController = TextEditingController();
  final emailController = TextEditingController();
  final messageController = TextEditingController();
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xfff5f5fd),
      body: Center(
        child: Container(
          height: 450,
          width: 400,
          margin: const EdgeInsets.symmetric(
            horizontal: 40,
            vertical: 20,
          ),
          padding: const EdgeInsets.symmetric(
            horizontal: 40,
            vertical: 20,
          ),
          decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(10),
              boxShadow: [
                BoxShadow(
                    offset: const Offset(0, 5),
                    blurRadius: 10,
                    spreadRadius: 1,
                    color: Colors.grey[300]!)
              ]),
          child: Form(
            key: _formKey,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                const Text('Contact Us',
                    style:
                        TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
                TextFormField(
                  controller: nameController,
                  decoration: const InputDecoration(hintText: 'Name'),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return '*Required';
                    }
                    return null;
                  },
                ),
                TextFormField(
                  controller: emailController,
                  decoration: const InputDecoration(hintText: 'Email'),
                  validator: (email) {
                    if (email == null || email.isEmpty) {
                      return 'Required*';
                    } else if (!EmailValidator.validate(email)) {
                      return 'Please enter a valid Email';
                    }
                    return null;
                  },
                ),
                TextFormField(
                  controller: messageController,
                  decoration: const InputDecoration(hintText: 'Message'),
                  maxLines: 5,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return '*Required';
                    }
                    return null;
                  },
                ),
                SizedBox(
                  height: 45,
                  width: 110,
                  child: TextButton(
                    style: TextButton.styleFrom(
                        primary: Colors.white,
                        backgroundColor: const Color(0xff151534),
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(40))),
                    onPressed: () {
                      if (_formKey.currentState!.validate()) {
                        //TODO: send email
                        nameController.clear();
                        emailController.clear();
                        messageController.clear();
                      }
                    },
                    child: const Text('Send', style: TextStyle(fontSize: 16)),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}



static Future<LoginAPI> connectToAPI(token) async {
    String url = 'https://test-space.hirogo.net/api/mypage/account/sendmail';

    Map<String, String> headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'Authorization': 'Bearer $token',
    };

    var body = json.encode({
    "email": email,
    "password": password
    });

    var apiResult = await http.post(
      Uri.parse(apiURL),
      headers: headers,
      body: body,
    );

    var jsonObject = json.decode(apiResult.body);
    if (apiResult.statusCode >= 300) {
      return jsonObject // you can mapping json object also here
    } else {
      return jsonObject // you can mapping json object also here
    }
  }


onPressed: () async {
   if (_formKey.currentState!.validate()) {
   final response = await sendEmail(
     nameController.value.text,
     emailController.value.text,
     messageController.value.text);
    ScaffoldMessenger.of(context).showSnackBar(
                          response == 200
                              ? const SnackBar(
                                  content: Text('Message Sent!'),
                                  backgroundColor: Colors.green)
                              : const SnackBar(
                                  content: Text('Failed to send message!'),
                                  backgroundColor: Colors.red),
                        );
                        nameController.clear();
                        emailController.clear();
                        messageController.clear();
                      }
                    },




      // Future sendEmail1() async {
          //   login();
          //
          //   await http.post(Uri.parse('https://test-space.hirogo.net/api/mypage/account/sendmail'),
          //     headers: {
          //       "Content-Type": "application/json",
          //       "Accept": "application/json",
          //       'Authorization': 'Bearer $token',
          //     },
          //   );
          // }




